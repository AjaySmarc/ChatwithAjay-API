{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ajays\\\\Desktop\\\\ChatwithAjay\\\\src\\\\components\\\\ChatInput.js\",\n  _s = $RefreshSig$();\n// src/components/ChatInput.js\nimport React, { useState } from 'react';\nimport GeminiService from '../utils/geminiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatInput = ({\n  onNewQuestion,\n  setIsLoading\n}) => {\n  _s();\n  const [question, setQuestion] = useState('');\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!question.trim()) return;\n    setIsLoading(true);\n    try {\n      const result = await GeminiService.generateAnswer(question);\n      if (result.success) {\n        onNewQuestion(question, result.answer);\n      } else {\n        // More detailed error handling\n        const errorMessage = result.error || \"An unexpected error occurred while processing your request.\";\n        console.error(\"Gemini API Error:\", errorMessage);\n        onNewQuestion(question, errorMessage);\n      }\n    } catch (error) {\n      // Catch any unexpected errors during API call\n      console.error(\"Unexpected Error:\", error);\n      const userFriendlyMessage = error.message.includes('API key') ? \"Invalid or missing API key. Please check your configuration.\" : error.message.includes('network') ? \"Network error. Please check your internet connection.\" : \"An unexpected error occurred. Please try again later.\";\n      onNewQuestion(question, userFriendlyMessage);\n    } finally {\n      setIsLoading(false);\n      setQuestion('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"mt-4\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: question,\n        onChange: e => setQuestion(e.target.value),\n        placeholder: \"Ask a question...\",\n        className: \"flex-grow px-4 py-2 border dark:border-gray-600 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"\",\n        children: \"Attach-file\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-r-lg transition-colors\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInput, \"X6N7EgaEMrwiXWJKemnQbxZKjLQ=\");\n_c = ChatInput;\nexport default ChatInput;\nvar _c;\n$RefreshReg$(_c, \"ChatInput\");","map":{"version":3,"names":["React","useState","GeminiService","jsxDEV","_jsxDEV","ChatInput","onNewQuestion","setIsLoading","_s","question","setQuestion","handleSubmit","e","preventDefault","trim","result","generateAnswer","success","answer","errorMessage","error","console","userFriendlyMessage","message","includes","onSubmit","className","children","type","value","onChange","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ajays/Desktop/ChatwithAjay/src/components/ChatInput.js"],"sourcesContent":["// src/components/ChatInput.js\r\nimport React, { useState } from 'react';\r\nimport GeminiService from '../utils/geminiService';\r\n\r\nconst ChatInput = ({ onNewQuestion, setIsLoading }) => {\r\n  const [question, setQuestion] = useState('');\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!question.trim()) return;\r\n\r\n    setIsLoading(true);\r\n    try {\r\n      const result = await GeminiService.generateAnswer(question);\r\n      \r\n      if (result.success) {\r\n        onNewQuestion(question, result.answer);\r\n      } else {\r\n        // More detailed error handling\r\n        const errorMessage = result.error || \r\n          \"An unexpected error occurred while processing your request.\";\r\n        \r\n        console.error(\"Gemini API Error:\", errorMessage);\r\n        \r\n        onNewQuestion(question, errorMessage);\r\n      }\r\n    } catch (error) {\r\n      // Catch any unexpected errors during API call\r\n      console.error(\"Unexpected Error:\", error);\r\n      \r\n      const userFriendlyMessage = \r\n        error.message.includes('API key') \r\n          ? \"Invalid or missing API key. Please check your configuration.\" \r\n          : error.message.includes('network')\r\n          ? \"Network error. Please check your internet connection.\"\r\n          : \"An unexpected error occurred. Please try again later.\";\r\n      \r\n      onNewQuestion(question, userFriendlyMessage);\r\n    } finally {\r\n      setIsLoading(false);\r\n      setQuestion('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"mt-4\">\r\n      <div className=\"flex items-center\">\r\n        <input\r\n          type=\"text\"\r\n          value={question}\r\n          onChange={(e) => setQuestion(e.target.value)}\r\n          placeholder=\"Ask a question...\"\r\n          className=\"flex-grow px-4 py-2 border dark:border-gray-600 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700\"\r\n        />\r\n        <button type=''>Attach-file</button>\r\n        <button\r\n          type=\"submit\"\r\n          className=\"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-r-lg transition-colors\"\r\n        >\r\n          Send\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ChatInput;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,aAAa,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,SAAS,GAAGA,CAAC;EAAEC,aAAa;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EACrD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMU,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI,CAACJ,QAAQ,CAACK,IAAI,CAAC,CAAC,EAAE;IAEtBP,YAAY,CAAC,IAAI,CAAC;IAClB,IAAI;MACF,MAAMQ,MAAM,GAAG,MAAMb,aAAa,CAACc,cAAc,CAACP,QAAQ,CAAC;MAE3D,IAAIM,MAAM,CAACE,OAAO,EAAE;QAClBX,aAAa,CAACG,QAAQ,EAAEM,MAAM,CAACG,MAAM,CAAC;MACxC,CAAC,MAAM;QACL;QACA,MAAMC,YAAY,GAAGJ,MAAM,CAACK,KAAK,IAC/B,6DAA6D;QAE/DC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAED,YAAY,CAAC;QAEhDb,aAAa,CAACG,QAAQ,EAAEU,YAAY,CAAC;MACvC;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd;MACAC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MAEzC,MAAME,mBAAmB,GACvBF,KAAK,CAACG,OAAO,CAACC,QAAQ,CAAC,SAAS,CAAC,GAC7B,8DAA8D,GAC9DJ,KAAK,CAACG,OAAO,CAACC,QAAQ,CAAC,SAAS,CAAC,GACjC,uDAAuD,GACvD,uDAAuD;MAE7DlB,aAAa,CAACG,QAAQ,EAAEa,mBAAmB,CAAC;IAC9C,CAAC,SAAS;MACRf,YAAY,CAAC,KAAK,CAAC;MACnBG,WAAW,CAAC,EAAE,CAAC;IACjB;EACF,CAAC;EAED,oBACEN,OAAA;IAAMqB,QAAQ,EAAEd,YAAa;IAACe,SAAS,EAAC,MAAM;IAAAC,QAAA,eAC5CvB,OAAA;MAAKsB,SAAS,EAAC,mBAAmB;MAAAC,QAAA,gBAChCvB,OAAA;QACEwB,IAAI,EAAC,MAAM;QACXC,KAAK,EAAEpB,QAAS;QAChBqB,QAAQ,EAAGlB,CAAC,IAAKF,WAAW,CAACE,CAAC,CAACmB,MAAM,CAACF,KAAK,CAAE;QAC7CG,WAAW,EAAC,mBAAmB;QAC/BN,SAAS,EAAC;MAAmI;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9I,CAAC,eACFhC,OAAA;QAAQwB,IAAI,EAAC,EAAE;QAAAD,QAAA,EAAC;MAAW;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACpChC,OAAA;QACEwB,IAAI,EAAC,QAAQ;QACbF,SAAS,EAAC,mFAAmF;QAAAC,QAAA,EAC9F;MAED;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEX,CAAC;AAAC5B,EAAA,CA5DIH,SAAS;AAAAgC,EAAA,GAAThC,SAAS;AA8Df,eAAeA,SAAS;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}