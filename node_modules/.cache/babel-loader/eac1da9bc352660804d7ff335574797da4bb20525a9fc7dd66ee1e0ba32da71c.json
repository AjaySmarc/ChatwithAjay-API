{"ast":null,"code":"// src/utils/geminiService.js\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\nclass GeminiService {\n  constructor() {\n    // Ensure API key is correctly set\n    const API_KEY = process.env.REACT_APP_GEMINI_API_KEY;\n    if (!API_KEY) {\n      throw new Error(\"Gemini API key is missing. Please set REACT_APP_GEMINI_API_KEY in .env file.\");\n    }\n    this.genAI = new GoogleGenerativeAI(API_KEY);\n  }\n  async generateAnswer(question) {\n    try {\n      // Use the correct model name\n      const model = this.genAI.getGenerativeModel({\n        model: \"gemini-1.0-pro\" // Updated model name\n      });\n      const result = await model.generateContent(question);\n      const response = result.response;\n      const text = response.text();\n      return {\n        success: true,\n        answer: text\n      };\n    } catch (error) {\n      console.error(\"Detailed Gemini API Error:\", {\n        message: error.message,\n        name: error.name,\n        stack: error.stack\n      });\n      return {\n        success: false,\n        error: error.message,\n        fullError: error\n      };\n    }\n  }\n\n  // Optional: Method to list available models\n  async listAvailableModels() {\n    try {\n      const availableModels = await this.genAI.listModels();\n      console.log(\"Available Models:\", availableModels);\n      return availableModels;\n    } catch (error) {\n      console.error(\"Error listing models:\", error);\n      return null;\n    }\n  }\n}\nexport default new GeminiService();","map":{"version":3,"names":["GoogleGenerativeAI","GeminiService","constructor","API_KEY","process","env","REACT_APP_GEMINI_API_KEY","Error","genAI","generateAnswer","question","model","getGenerativeModel","result","generateContent","response","text","success","answer","error","console","message","name","stack","fullError","listAvailableModels","availableModels","listModels","log"],"sources":["C:/Users/ajays/Desktop/ChatwithAjay/src/utils/geminiService.js"],"sourcesContent":["// src/utils/geminiService.js\r\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\r\n\r\nclass GeminiService {\r\n  constructor() {\r\n    // Ensure API key is correctly set\r\n    const API_KEY = process.env.REACT_APP_GEMINI_API_KEY;\r\n    if (!API_KEY) {\r\n      throw new Error(\"Gemini API key is missing. Please set REACT_APP_GEMINI_API_KEY in .env file.\");\r\n    }\r\n    this.genAI = new GoogleGenerativeAI(API_KEY);\r\n  }\r\n\r\n  async generateAnswer(question) {\r\n    try {\r\n      // Use the correct model name\r\n      const model = this.genAI.getGenerativeModel({ \r\n        model: \"gemini-1.0-pro\" // Updated model name\r\n      });\r\n      \r\n      const result = await model.generateContent(question);\r\n      const response = result.response;\r\n      const text = response.text();\r\n      \r\n      return {\r\n        success: true,\r\n        answer: text\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Detailed Gemini API Error:\", {\r\n        message: error.message,\r\n        name: error.name,\r\n        stack: error.stack\r\n      });\r\n\r\n      return {\r\n        success: false,\r\n        error: error.message,\r\n        fullError: error\r\n      };\r\n    }\r\n  }\r\n\r\n  // Optional: Method to list available models\r\n  async listAvailableModels() {\r\n    try {\r\n      const availableModels = await this.genAI.listModels();\r\n      console.log(\"Available Models:\", availableModels);\r\n      return availableModels;\r\n    } catch (error) {\r\n      console.error(\"Error listing models:\", error);\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new GeminiService();"],"mappings":"AAAA;AACA,SAASA,kBAAkB,QAAQ,uBAAuB;AAE1D,MAAMC,aAAa,CAAC;EAClBC,WAAWA,CAAA,EAAG;IACZ;IACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,wBAAwB;IACpD,IAAI,CAACH,OAAO,EAAE;MACZ,MAAM,IAAII,KAAK,CAAC,8EAA8E,CAAC;IACjG;IACA,IAAI,CAACC,KAAK,GAAG,IAAIR,kBAAkB,CAACG,OAAO,CAAC;EAC9C;EAEA,MAAMM,cAAcA,CAACC,QAAQ,EAAE;IAC7B,IAAI;MACF;MACA,MAAMC,KAAK,GAAG,IAAI,CAACH,KAAK,CAACI,kBAAkB,CAAC;QAC1CD,KAAK,EAAE,gBAAgB,CAAC;MAC1B,CAAC,CAAC;MAEF,MAAME,MAAM,GAAG,MAAMF,KAAK,CAACG,eAAe,CAACJ,QAAQ,CAAC;MACpD,MAAMK,QAAQ,GAAGF,MAAM,CAACE,QAAQ;MAChC,MAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAI,CAAC,CAAC;MAE5B,OAAO;QACLC,OAAO,EAAE,IAAI;QACbC,MAAM,EAAEF;MACV,CAAC;IACH,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAE;QAC1CE,OAAO,EAAEF,KAAK,CAACE,OAAO;QACtBC,IAAI,EAAEH,KAAK,CAACG,IAAI;QAChBC,KAAK,EAAEJ,KAAK,CAACI;MACf,CAAC,CAAC;MAEF,OAAO;QACLN,OAAO,EAAE,KAAK;QACdE,KAAK,EAAEA,KAAK,CAACE,OAAO;QACpBG,SAAS,EAAEL;MACb,CAAC;IACH;EACF;;EAEA;EACA,MAAMM,mBAAmBA,CAAA,EAAG;IAC1B,IAAI;MACF,MAAMC,eAAe,GAAG,MAAM,IAAI,CAAClB,KAAK,CAACmB,UAAU,CAAC,CAAC;MACrDP,OAAO,CAACQ,GAAG,CAAC,mBAAmB,EAAEF,eAAe,CAAC;MACjD,OAAOA,eAAe;IACxB,CAAC,CAAC,OAAOP,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,OAAO,IAAI;IACb;EACF;AACF;AAEA,eAAe,IAAIlB,aAAa,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}