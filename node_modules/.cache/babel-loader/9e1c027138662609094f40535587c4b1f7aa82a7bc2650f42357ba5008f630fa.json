{"ast":null,"code":"import { GoogleGenerativeAI } from \"@google/generative-ai\";\nclass GeminiService {\n  constructor() {\n    // Ensure API key is correctly set\n    const API_KEY = process.env.REACT_APP_GEMINI_API_KEY;\n    if (!API_KEY) {\n      throw new Error(\"Gemini API key is missing. Please set REACT_APP_GEMINI_API_KEY in .env file.\");\n    }\n    this.genAI = new GoogleGenerativeAI(API_KEY);\n  }\n\n  // Detect file type and set appropriate MIME type\n  _detectMimeType(fileBase64) {\n    const base64Prefix = fileBase64.split(',')[0];\n    const mimeTypeMap = {\n      'data:image/jpeg': 'image/jpeg',\n      'data:image/png': 'image/png',\n      'data:image/gif': 'image/gif',\n      'data:image/webp': 'image/webp',\n      'data:application/pdf': 'application/pdf'\n    };\n    return mimeTypeMap[base64Prefix] || 'application/octet-stream';\n  }\n\n  // Text-based query\n  async generateAnswer(question) {\n    try {\n      const model = this.genAI.getGenerativeModel({\n        model: \"models/gemini-2.0-flash\"\n      });\n      const result = await model.generateContent(question);\n      const response = result.response;\n      const text = response.text();\n      return {\n        success: true,\n        answer: text\n      };\n    } catch (error) {\n      console.error(\"Detailed Gemini API Error:\", {\n        message: error.message,\n        name: error.name,\n        stack: error.stack\n      });\n      return {\n        success: false,\n        error: this._formatErrorMessage(error),\n        fullError: error\n      };\n    }\n  }\n\n  // File-based query with image/document support\n  async generateAnswerWithFile(question, fileBase64) {\n    try {\n      // Validate inputs\n      if (!fileBase64) {\n        throw new Error(\"No file provided\");\n      }\n\n      // Detect MIME type and extract base64 data\n      const mimeType = this._detectMimeType(fileBase64);\n      const base64Data = fileBase64.split(',')[1];\n\n      // Select appropriate model based on file type\n      const modelName = this._selectModelForFileType(mimeType);\n      const model = this.genAI.getGenerativeModel({\n        model: modelName\n      });\n\n      // Prepare content for analysis\n      const result = await model.generateContent({\n        contents: [{\n          role: 'user',\n          parts: [{\n            text: question || \"Describe this image/document\"\n          }, {\n            inlineData: {\n              mimeType: mimeType,\n              data: base64Data\n            }\n          }]\n        }]\n      });\n      const response = result.response;\n      const text = response.text();\n      return {\n        success: true,\n        answer: text,\n        fileType: mimeType\n      };\n    } catch (error) {\n      console.error(\"File Analysis Error:\", error);\n      return {\n        success: false,\n        error: this._formatErrorMessage(error),\n        fileType: this._detectMimeType(fileBase64)\n      };\n    }\n  }\n\n  // Select model based on file type\n  _selectModelForFileType(mimeType) {\n    const imageTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];\n    return imageTypes.includes(mimeType) ? \"models/gemini-1.0-pro-vision\" : \"models/gemini-2.0-flash\";\n  }\n\n  // Provide user-friendly error messages\n  _formatErrorMessage(error) {\n    const errorMap = {\n      'API key': \"Invalid or missing API key\",\n      'network': \"Network error. Check your connection\",\n      'quota': \"API usage quota exceeded\",\n      'rate limit': \"Too many requests. Please wait\",\n      'invalid': \"Invalid request parameters\"\n    };\n    for (const [key, message] of Object.entries(errorMap)) {\n      if (error.message.toLowerCase().includes(key)) {\n        return message;\n      }\n    }\n    return error.message || \"An unexpected error occurred\";\n  }\n\n  // Optional: Method to list available models\n  async listAvailableModels() {\n    try {\n      const availableModels = await this.genAI.listModels();\n      console.log(\"Available Models:\", availableModels);\n      return availableModels;\n    } catch (error) {\n      console.error(\"Error listing models:\", error);\n      return null;\n    }\n  }\n}\nexport default new GeminiService();","map":{"version":3,"names":["GoogleGenerativeAI","GeminiService","constructor","API_KEY","process","env","REACT_APP_GEMINI_API_KEY","Error","genAI","_detectMimeType","fileBase64","base64Prefix","split","mimeTypeMap","generateAnswer","question","model","getGenerativeModel","result","generateContent","response","text","success","answer","error","console","message","name","stack","_formatErrorMessage","fullError","generateAnswerWithFile","mimeType","base64Data","modelName","_selectModelForFileType","contents","role","parts","inlineData","data","fileType","imageTypes","includes","errorMap","key","Object","entries","toLowerCase","listAvailableModels","availableModels","listModels","log"],"sources":["C:/Users/ajays/Desktop/ChatwithAjay/src/utils/geminiService.js"],"sourcesContent":["import { GoogleGenerativeAI } from \"@google/generative-ai\";\r\n\r\nclass GeminiService {\r\n  constructor() {\r\n    // Ensure API key is correctly set\r\n    const API_KEY = process.env.REACT_APP_GEMINI_API_KEY;\r\n    if (!API_KEY) {\r\n      throw new Error(\"Gemini API key is missing. Please set REACT_APP_GEMINI_API_KEY in .env file.\");\r\n    }\r\n    this.genAI = new GoogleGenerativeAI(API_KEY);\r\n  }\r\n\r\n  // Detect file type and set appropriate MIME type\r\n  _detectMimeType(fileBase64) {\r\n    const base64Prefix = fileBase64.split(',')[0];\r\n    const mimeTypeMap = {\r\n      'data:image/jpeg': 'image/jpeg',\r\n      'data:image/png': 'image/png',\r\n      'data:image/gif': 'image/gif',\r\n      'data:image/webp': 'image/webp',\r\n      'data:application/pdf': 'application/pdf'\r\n    };\r\n\r\n    return mimeTypeMap[base64Prefix] || 'application/octet-stream';\r\n  }\r\n\r\n  // Text-based query\r\n  async generateAnswer(question) {\r\n    try {\r\n      const model = this.genAI.getGenerativeModel({ \r\n        model: \"models/gemini-2.0-flash\"\r\n      });\r\n      \r\n      const result = await model.generateContent(question);\r\n      const response = result.response;\r\n      const text = response.text();\r\n      \r\n      return {\r\n        success: true,\r\n        answer: text\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Detailed Gemini API Error:\", {\r\n        message: error.message,\r\n        name: error.name,\r\n        stack: error.stack\r\n      });\r\n\r\n      return {\r\n        success: false,\r\n        error: this._formatErrorMessage(error),\r\n        fullError: error\r\n      };\r\n    }\r\n  }\r\n\r\n  // File-based query with image/document support\r\n  async generateAnswerWithFile(question, fileBase64) {\r\n    try {\r\n      // Validate inputs\r\n      if (!fileBase64) {\r\n        throw new Error(\"No file provided\");\r\n      }\r\n\r\n      // Detect MIME type and extract base64 data\r\n      const mimeType = this._detectMimeType(fileBase64);\r\n      const base64Data = fileBase64.split(',')[1];\r\n\r\n      // Select appropriate model based on file type\r\n      const modelName = this._selectModelForFileType(mimeType);\r\n      const model = this.genAI.getGenerativeModel({ model: modelName });\r\n\r\n      // Prepare content for analysis\r\n      const result = await model.generateContent({\r\n        contents: [{ \r\n          role: 'user', \r\n          parts: [\r\n            { text: question || \"Describe this image/document\" },\r\n            { \r\n              inlineData: { \r\n                mimeType: mimeType,\r\n                data: base64Data\r\n              }\r\n            }\r\n          ]\r\n        }]\r\n      });\r\n\r\n      const response = result.response;\r\n      const text = response.text();\r\n      \r\n      return {\r\n        success: true,\r\n        answer: text,\r\n        fileType: mimeType\r\n      };\r\n    } catch (error) {\r\n      console.error(\"File Analysis Error:\", error);\r\n      return {\r\n        success: false,\r\n        error: this._formatErrorMessage(error),\r\n        fileType: this._detectMimeType(fileBase64)\r\n      };\r\n    }\r\n  }\r\n\r\n  // Select model based on file type\r\n  _selectModelForFileType(mimeType) {\r\n    const imageTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];\r\n    \r\n    return imageTypes.includes(mimeType) \r\n      ? \"models/gemini-1.0-pro-vision\" \r\n      : \"models/gemini-2.0-flash\";\r\n  }\r\n\r\n  // Provide user-friendly error messages\r\n  _formatErrorMessage(error) {\r\n    const errorMap = {\r\n      'API key': \"Invalid or missing API key\",\r\n      'network': \"Network error. Check your connection\",\r\n      'quota': \"API usage quota exceeded\",\r\n      'rate limit': \"Too many requests. Please wait\",\r\n      'invalid': \"Invalid request parameters\"\r\n    };\r\n\r\n    for (const [key, message] of Object.entries(errorMap)) {\r\n      if (error.message.toLowerCase().includes(key)) {\r\n        return message;\r\n      }\r\n    }\r\n\r\n    return error.message || \"An unexpected error occurred\";\r\n  }\r\n\r\n  // Optional: Method to list available models\r\n  async listAvailableModels() {\r\n    try {\r\n      const availableModels = await this.genAI.listModels();\r\n      console.log(\"Available Models:\", availableModels);\r\n      return availableModels;\r\n    } catch (error) {\r\n      console.error(\"Error listing models:\", error);\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new GeminiService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}