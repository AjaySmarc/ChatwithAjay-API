{"ast":null,"code":"import{GoogleGenerativeAI}from\"@google/generative-ai\";class GeminiService{constructor(){// Ensure API key is correctly set\nconst API_KEY=process.env.REACT_APP_GEMINI_API_KEY;if(!API_KEY){throw new Error(\"Gemini API key is missing. Please set REACT_APP_GEMINI_API_KEY in .env file.\");}this.genAI=new GoogleGenerativeAI(API_KEY);}// Detect file type and set appropriate MIME type\n_detectMimeType(fileBase64){const base64Prefix=fileBase64.split(',')[0];const mimeTypeMap={'data:image/jpeg':'image/jpeg','data:image/png':'image/png','data:image/gif':'image/gif','data:image/webp':'image/webp','data:application/pdf':'application/pdf'};return mimeTypeMap[base64Prefix]||'application/octet-stream';}// Text-based query\nasync generateAnswer(question){try{const model=this.genAI.getGenerativeModel({model:\"models/gemini-2.0-flash\"});const result=await model.generateContent(question);const response=result.response;const text=response.text();return{success:true,answer:text};}catch(error){console.error(\"Detailed Gemini API Error:\",{message:error.message,name:error.name,stack:error.stack});return{success:false,error:this._formatErrorMessage(error),fullError:error};}}// File-based query with image/document support\nasync generateAnswerWithFile(question,fileBase64){try{// Validate inputs\nif(!fileBase64){throw new Error(\"No file provided\");}// Detect MIME type and extract base64 data\nconst mimeType=this._detectMimeType(fileBase64);const base64Data=fileBase64.split(',')[1];// Select appropriate model based on file type\nconst modelName=this._selectModelForFileType(mimeType);const model=this.genAI.getGenerativeModel({model:modelName});// Prepare content for analysis\nconst result=await model.generateContent({contents:[{role:'user',parts:[{text:question||\"Describe this image/document\"},{inlineData:{mimeType:mimeType,data:base64Data}}]}]});const response=result.response;const text=response.text();return{success:true,answer:text,fileType:mimeType};}catch(error){console.error(\"File Analysis Error:\",error);return{success:false,error:this._formatErrorMessage(error),fileType:this._detectMimeType(fileBase64)};}}// Select model based on file type\n_selectModelForFileType(mimeType){const imageTypes=['image/jpeg','image/png','image/gif','image/webp'];return imageTypes.includes(mimeType)?\"models/gemini-1.0-pro-vision\":\"models/gemini-2.0-flash\";}// Provide user-friendly error messages\n_formatErrorMessage(error){const errorMap={'API key':\"Invalid or missing API key\",'network':\"Network error. Check your connection\",'quota':\"API usage quota exceeded\",'rate limit':\"Too many requests. Please wait\",'invalid':\"Invalid request parameters\"};for(const[key,message]of Object.entries(errorMap)){if(error.message.toLowerCase().includes(key)){return message;}}return error.message||\"An unexpected error occurred\";}// Optional: Method to list available models\nasync listAvailableModels(){try{const availableModels=await this.genAI.listModels();console.log(\"Available Models:\",availableModels);return availableModels;}catch(error){console.error(\"Error listing models:\",error);return null;}}}export default GeminiService();","map":{"version":3,"names":["GoogleGenerativeAI","GeminiService","constructor","API_KEY","process","env","REACT_APP_GEMINI_API_KEY","Error","genAI","_detectMimeType","fileBase64","base64Prefix","split","mimeTypeMap","generateAnswer","question","model","getGenerativeModel","result","generateContent","response","text","success","answer","error","console","message","name","stack","_formatErrorMessage","fullError","generateAnswerWithFile","mimeType","base64Data","modelName","_selectModelForFileType","contents","role","parts","inlineData","data","fileType","imageTypes","includes","errorMap","key","Object","entries","toLowerCase","listAvailableModels","availableModels","listModels","log"],"sources":["C:/Users/ajays/Desktop/ChatwithAjay/src/utils/geminiService.js"],"sourcesContent":["import { GoogleGenerativeAI } from \"@google/generative-ai\";\r\n\r\nclass GeminiService {\r\n  constructor() {\r\n    // Ensure API key is correctly set\r\n    const API_KEY = process.env.REACT_APP_GEMINI_API_KEY;\r\n    if (!API_KEY) {\r\n      throw new Error(\"Gemini API key is missing. Please set REACT_APP_GEMINI_API_KEY in .env file.\");\r\n    }\r\n    this.genAI = new GoogleGenerativeAI(API_KEY);\r\n  }\r\n\r\n  // Detect file type and set appropriate MIME type\r\n  _detectMimeType(fileBase64) {\r\n    const base64Prefix = fileBase64.split(',')[0];\r\n    const mimeTypeMap = {\r\n      'data:image/jpeg': 'image/jpeg',\r\n      'data:image/png': 'image/png',\r\n      'data:image/gif': 'image/gif',\r\n      'data:image/webp': 'image/webp',\r\n      'data:application/pdf': 'application/pdf'\r\n    };\r\n\r\n    return mimeTypeMap[base64Prefix] || 'application/octet-stream';\r\n  }\r\n\r\n  // Text-based query\r\n  async generateAnswer(question) {\r\n    try {\r\n      const model = this.genAI.getGenerativeModel({ \r\n        model: \"models/gemini-2.0-flash\"\r\n      });\r\n      \r\n      const result = await model.generateContent(question);\r\n      const response = result.response;\r\n      const text = response.text();\r\n      \r\n      return {\r\n        success: true,\r\n        answer: text\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Detailed Gemini API Error:\", {\r\n        message: error.message,\r\n        name: error.name,\r\n        stack: error.stack\r\n      });\r\n\r\n      return {\r\n        success: false,\r\n        error: this._formatErrorMessage(error),\r\n        fullError: error\r\n      };\r\n    }\r\n  }\r\n\r\n  // File-based query with image/document support\r\n  async generateAnswerWithFile(question, fileBase64) {\r\n    try {\r\n      // Validate inputs\r\n      if (!fileBase64) {\r\n        throw new Error(\"No file provided\");\r\n      }\r\n\r\n      // Detect MIME type and extract base64 data\r\n      const mimeType = this._detectMimeType(fileBase64);\r\n      const base64Data = fileBase64.split(',')[1];\r\n\r\n      // Select appropriate model based on file type\r\n      const modelName = this._selectModelForFileType(mimeType);\r\n      const model = this.genAI.getGenerativeModel({ model: modelName });\r\n\r\n      // Prepare content for analysis\r\n      const result = await model.generateContent({\r\n        contents: [{ \r\n          role: 'user', \r\n          parts: [\r\n            { text: question || \"Describe this image/document\" },\r\n            { \r\n              inlineData: { \r\n                mimeType: mimeType,\r\n                data: base64Data\r\n              }\r\n            }\r\n          ]\r\n        }]\r\n      });\r\n\r\n      const response = result.response;\r\n      const text = response.text();\r\n      \r\n      return {\r\n        success: true,\r\n        answer: text,\r\n        fileType: mimeType\r\n      };\r\n    } catch (error) {\r\n      console.error(\"File Analysis Error:\", error);\r\n      return {\r\n        success: false,\r\n        error: this._formatErrorMessage(error),\r\n        fileType: this._detectMimeType(fileBase64)\r\n      };\r\n    }\r\n  }\r\n\r\n  // Select model based on file type\r\n  _selectModelForFileType(mimeType) {\r\n    const imageTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];\r\n    \r\n    return imageTypes.includes(mimeType) \r\n      ? \"models/gemini-1.0-pro-vision\" \r\n      : \"models/gemini-2.0-flash\";\r\n  }\r\n\r\n  // Provide user-friendly error messages\r\n  _formatErrorMessage(error) {\r\n    const errorMap = {\r\n      'API key': \"Invalid or missing API key\",\r\n      'network': \"Network error. Check your connection\",\r\n      'quota': \"API usage quota exceeded\",\r\n      'rate limit': \"Too many requests. Please wait\",\r\n      'invalid': \"Invalid request parameters\"\r\n    };\r\n\r\n    for (const [key, message] of Object.entries(errorMap)) {\r\n      if (error.message.toLowerCase().includes(key)) {\r\n        return message;\r\n      }\r\n    }\r\n\r\n    return error.message || \"An unexpected error occurred\";\r\n  }\r\n\r\n  // Optional: Method to list available models\r\n  async listAvailableModels() {\r\n    try {\r\n      const availableModels = await this.genAI.listModels();\r\n      console.log(\"Available Models:\", availableModels);\r\n      return availableModels;\r\n    } catch (error) {\r\n      console.error(\"Error listing models:\", error);\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nexport default  GeminiService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}