{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ajays\\\\Desktop\\\\ChatwithAjay\\\\src\\\\components\\\\VoiceInput.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport GeminiService from '../utils/geminiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VoiceInput = ({\n  onNewQuestion,\n  setIsLoading,\n  supportedLanguages = ['en-US', 'es-ES', 'fr-FR', 'de-DE'],\n  maxTranscriptLength = 500\n}) => {\n  _s();\n  const [isListening, setIsListening] = useState(false);\n  const [transcript, setTranscript] = useState('');\n  const [language, setLanguage] = useState('en-US');\n  const [error, setError] = useState(null);\n  const recognitionRef = useRef(null);\n  useEffect(() => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (SpeechRecognition) {\n      recognitionRef.current = new SpeechRecognition();\n      recognitionRef.current.continuous = false;\n      recognitionRef.current.interimResults = false;\n      recognitionRef.current.lang = language;\n      recognitionRef.current.onstart = () => {\n        setError(null);\n        setTranscript('');\n      };\n      recognitionRef.current.onresult = event => {\n        const speechResult = event.results[0][0].transcript;\n\n        // Truncate transcript if too long\n        const truncatedResult = speechResult.slice(0, maxTranscriptLength);\n        setTranscript(truncatedResult);\n        handleVoiceSubmit(truncatedResult);\n      };\n      recognitionRef.current.onerror = event => {\n        let errorMessage = '';\n        switch (event.error) {\n          case 'no-speech':\n            errorMessage = 'No speech was detected. Please try again.';\n            break;\n          case 'audio-capture':\n            errorMessage = 'Audio capture failed. Check your microphone.';\n            break;\n          case 'not-allowed':\n            errorMessage = 'Microphone access denied. Please check permissions.';\n            break;\n          default:\n            errorMessage = 'An unexpected error occurred during voice recognition.';\n        }\n        setError(errorMessage);\n        setIsListening(false);\n        console.error('Speech recognition error:', event.error);\n      };\n      recognitionRef.current.onend = () => {\n        setIsListening(false);\n      };\n    } else {\n      setError('Speech recognition is not supported in this browser.');\n    }\n    return () => {\n      if (recognitionRef.current) {\n        recognitionRef.current.stop();\n      }\n    };\n  }, [language, maxTranscriptLength]);\n  const startListening = () => {\n    if (recognitionRef.current) {\n      try {\n        setIsListening(true);\n        setError(null);\n        recognitionRef.current.start();\n      } catch (err) {\n        setError('Failed to start voice recognition.');\n        setIsListening(false);\n      }\n    }\n  };\n  const stopListening = () => {\n    if (recognitionRef.current) {\n      recognitionRef.current.stop();\n      setIsListening(false);\n    }\n  };\n  const handleVoiceSubmit = async question => {\n    setIsLoading(true);\n    try {\n      const result = await GeminiService.generateAnswer(question);\n      if (result.success) {\n        onNewQuestion(question, result.answer);\n        speakAnswer(result.answer);\n      } else {\n        onNewQuestion(question, result.error || \"Processing error occurred.\");\n      }\n    } catch (error) {\n      onNewQuestion(question, \"Network or service error.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const speakAnswer = text => {\n    const utterance = new SpeechSynthesisUtterance(text);\n    utterance.rate = 0.9;\n    utterance.lang = language;\n    window.speechSynthesis.speak(utterance);\n  };\n  const changeLanguage = newLanguage => {\n    if (supportedLanguages.includes(newLanguage)) {\n      setLanguage(newLanguage);\n      if (recognitionRef.current) {\n        recognitionRef.current.lang = newLanguage;\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col space-y-2\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center space-x-2\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        value: language,\n        onChange: e => changeLanguage(e.target.value),\n        className: \"p-2 border rounded\",\n        children: supportedLanguages.map(lang => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: lang,\n          children: lang\n        }, lang, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: isListening ? stopListening : startListening,\n        className: `p-2 rounded-full transition-colors duration-300 \n            ${isListening ? 'bg-red-500 hover:bg-red-600 text-white' : 'bg-blue-500 hover:bg-blue-600 text-white'}`,\n        children: [isListening ? 'Stop' : 'Start', \" Listening\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.speechSynthesis.cancel(),\n        className: \"p-2 bg-gray-200 rounded hover:bg-gray-300\",\n        children: \"Stop Speaking\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), isListening && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-blue-600\",\n      children: \"Listening...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-red-500\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }, this), transcript && !isListening && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-gray-600\",\n      children: [\"Transcribed: \", transcript]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n};\n_s(VoiceInput, \"Rbfr/iIiAMiPxHOOhol/LMCoIp0=\");\n_c = VoiceInput;\nexport default VoiceInput;\nvar _c;\n$RefreshReg$(_c, \"VoiceInput\");","map":{"version":3,"names":["React","useState","useRef","useEffect","GeminiService","jsxDEV","_jsxDEV","VoiceInput","onNewQuestion","setIsLoading","supportedLanguages","maxTranscriptLength","_s","isListening","setIsListening","transcript","setTranscript","language","setLanguage","error","setError","recognitionRef","SpeechRecognition","window","webkitSpeechRecognition","current","continuous","interimResults","lang","onstart","onresult","event","speechResult","results","truncatedResult","slice","handleVoiceSubmit","onerror","errorMessage","console","onend","stop","startListening","start","err","stopListening","question","result","generateAnswer","success","answer","speakAnswer","text","utterance","SpeechSynthesisUtterance","rate","speechSynthesis","speak","changeLanguage","newLanguage","includes","className","children","value","onChange","e","target","map","fileName","_jsxFileName","lineNumber","columnNumber","onClick","cancel","_c","$RefreshReg$"],"sources":["C:/Users/ajays/Desktop/ChatwithAjay/src/components/VoiceInput.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport GeminiService from '../utils/geminiService';\r\n\r\nconst VoiceInput = ({ \r\n  onNewQuestion, \r\n  setIsLoading, \r\n  supportedLanguages = ['en-US', 'es-ES', 'fr-FR', 'de-DE'],\r\n  maxTranscriptLength = 500 \r\n}) => {\r\n  const [isListening, setIsListening] = useState(false);\r\n  const [transcript, setTranscript] = useState('');\r\n  const [language, setLanguage] = useState('en-US');\r\n  const [error, setError] = useState(null);\r\n  const recognitionRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const SpeechRecognition = \r\n      window.SpeechRecognition || \r\n      window.webkitSpeechRecognition;\r\n\r\n    if (SpeechRecognition) {\r\n      recognitionRef.current = new SpeechRecognition();\r\n      recognitionRef.current.continuous = false;\r\n      recognitionRef.current.interimResults = false;\r\n      recognitionRef.current.lang = language;\r\n\r\n      recognitionRef.current.onstart = () => {\r\n        setError(null);\r\n        setTranscript('');\r\n      };\r\n\r\n      recognitionRef.current.onresult = (event) => {\r\n        const speechResult = event.results[0][0].transcript;\r\n        \r\n        // Truncate transcript if too long\r\n        const truncatedResult = speechResult.slice(0, maxTranscriptLength);\r\n        \r\n        setTranscript(truncatedResult);\r\n        handleVoiceSubmit(truncatedResult);\r\n      };\r\n\r\n      recognitionRef.current.onerror = (event) => {\r\n        let errorMessage = '';\r\n        switch(event.error) {\r\n          case 'no-speech':\r\n            errorMessage = 'No speech was detected. Please try again.';\r\n            break;\r\n          case 'audio-capture':\r\n            errorMessage = 'Audio capture failed. Check your microphone.';\r\n            break;\r\n          case 'not-allowed':\r\n            errorMessage = 'Microphone access denied. Please check permissions.';\r\n            break;\r\n          default:\r\n            errorMessage = 'An unexpected error occurred during voice recognition.';\r\n        }\r\n        \r\n        setError(errorMessage);\r\n        setIsListening(false);\r\n        console.error('Speech recognition error:', event.error);\r\n      };\r\n\r\n      recognitionRef.current.onend = () => {\r\n        setIsListening(false);\r\n      };\r\n    } else {\r\n      setError('Speech recognition is not supported in this browser.');\r\n    }\r\n\r\n    return () => {\r\n      if (recognitionRef.current) {\r\n        recognitionRef.current.stop();\r\n      }\r\n    };\r\n  }, [language, maxTranscriptLength]);\r\n\r\n  const startListening = () => {\r\n    if (recognitionRef.current) {\r\n      try {\r\n        setIsListening(true);\r\n        setError(null);\r\n        recognitionRef.current.start();\r\n      } catch (err) {\r\n        setError('Failed to start voice recognition.');\r\n        setIsListening(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const stopListening = () => {\r\n    if (recognitionRef.current) {\r\n      recognitionRef.current.stop();\r\n      setIsListening(false);\r\n    }\r\n  };\r\n\r\n  const handleVoiceSubmit = async (question) => {\r\n    setIsLoading(true);\r\n    try {\r\n      const result = await GeminiService.generateAnswer(question);\r\n      \r\n      if (result.success) {\r\n        onNewQuestion(question, result.answer);\r\n        speakAnswer(result.answer);\r\n      } else {\r\n        onNewQuestion(question, result.error || \"Processing error occurred.\");\r\n      }\r\n    } catch (error) {\r\n      onNewQuestion(question, \"Network or service error.\");\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const speakAnswer = (text) => {\r\n    const utterance = new SpeechSynthesisUtterance(text);\r\n    utterance.rate = 0.9;\r\n    utterance.lang = language;\r\n    window.speechSynthesis.speak(utterance);\r\n  };\r\n\r\n  const changeLanguage = (newLanguage) => {\r\n    if (supportedLanguages.includes(newLanguage)) {\r\n      setLanguage(newLanguage);\r\n      if (recognitionRef.current) {\r\n        recognitionRef.current.lang = newLanguage;\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col space-y-2\">\r\n      <div className=\"flex items-center space-x-2\">\r\n        {/* Language Selector */}\r\n        <select \r\n          value={language}\r\n          onChange={(e) => changeLanguage(e.target.value)}\r\n          className=\"p-2 border rounded\"\r\n        >\r\n          {supportedLanguages.map(lang => (\r\n            <option key={lang} value={lang}>\r\n              {lang}\r\n            </option>\r\n          ))}\r\n        </select>\r\n\r\n        {/* Voice Input Button */}\r\n        <button\r\n          onClick={isListening ? stopListening : startListening}\r\n          className={`p-2 rounded-full transition-colors duration-300 \r\n            ${isListening \r\n              ? 'bg-red-500 hover:bg-red-600 text-white' \r\n              : 'bg-blue-500 hover:bg-blue-600 text-white'\r\n            }`}\r\n        >\r\n          {isListening ? 'Stop' : 'Start'} Listening\r\n        </button>\r\n\r\n        {/* Stop Speaking Button */}\r\n        <button\r\n          onClick={() => window.speechSynthesis.cancel()}\r\n          className=\"p-2 bg-gray-200 rounded hover:bg-gray-300\"\r\n        >\r\n          Stop Speaking\r\n        </button>\r\n      </div>\r\n\r\n      {/* Status and Error Display */}\r\n      {isListening && (\r\n        <div className=\"text-blue-600\">Listening...</div>\r\n      )}\r\n\r\n      {error && (\r\n        <div className=\"text-red-500\">{error}</div>\r\n      )}\r\n\r\n      {transcript && !isListening && (\r\n        <div className=\"text-gray-600\">\r\n          Transcribed: {transcript}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VoiceInput;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}